" copy from wookayin's vimrc file
" https://dotfiles.wook.kr/vim/vimrc

"""""""""""""""""""""""""""
" 1. General Settings
"""""""""""""""""""""""""""

syntax on
set nocompatible

" use path '~/.vim' even on non-unix machine
set runtimepath+=~/.vim

" load plugins with pathogen/vundle
try
	runtime bundle/vim-pathogen/autoload/pathogen.vim
	execute pathogen#infect()
catch
endtry

" basic displays
set number					" show line numbers
set ruler

" input settings
set bs=indent,eol,start		" allow backspaces over everything
set autoindent
set smartindent
set cindent
set pastetoggle=<F8>

set nowrap
set textwidth=0				" disable automatic line breaking
set cursorline

" tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4

" tab navigation
set showtabline=2			" always show tab pannel

set scrolloff=3

" search
set ignorecase				" case-insensitive by default
set smartcase				" case-sensitive if keyword contains both uppercase and lowercase
set incsearch
set hlsearch

" wildmenu settings
set wildmenu
set wildmode=list:longest,full
set wildignore=*.swp,*.swo,*.class

" status line
set laststatus=2			" show anytime


" airline settings
if isdirectory(expand("~/.vim/bundle/vim-airline"))
	let g:airline_theme='luna'
	let g:airline_powerline_fonts = 1
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#whitespace#mixed_indent_algo = 1
endif


" mouse behaviour
set mouse=nvc
set ttymouse=xterm2

" encoding and line ending settings
set encoding=utf-8
set fileencodings=utf-8,cp949,latin1
set fileformats=unix,dos

" split and autocomplete settings
set splitbelow              " preview window at bottom

" no fucking swap and backup files
set noswapfile
set nobackup

" miscellanious
set showmode
set showcmd

set visualbell
set history=1000
set undolevels=1000
set lazyredraw				" no redrawing during macro execution

set mps+=<:>


"""""""""""""""""""""""""""
" 2. Key Mappings
"""""""""""""""""""""""""""

" the leader key
let mapleader=","			" comma is the <Leader> key.

" navigation key mapping
map k gk
map j gj
sunmap k
sunmap j

nmap <up> gk
nmap <down> gj
imap <up> <c-o>gk
imap <down> <c-o>gj

" window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Tab navigations
nnoremap <C-t>     :tabnew<CR>
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>

" Tab alternative navigations
" (terminals might capture <Ctrl-t> or something else)
nnoremap <leader>tn  :tabnext<CR>
nnoremap <leader>tp  :tabprev<CR>


" do not exit from visual mode when shifting
" (gv : select the preivous area)
vnoremap < <gv
vnoremap > >gv

" [F5] Make
map <F5> <ESC>:w<CR>:make!<CR>
imap <F5> <ESC>:w<CR>:make!<CR>

" [F4] Next Error [Shift+F4] Previous Error
map <F4> <ESC>:cn<CR>
map [26~ <ESC>:cp<CR>

" [F2] save
imap <F2> <ESC>:w<CR>
map <F2> <ESC><ESC>:w<CR>

" handy command-line mode
nnoremap ; :

" Useful leader key combinations {{{

" <leader><space> : turn off search highlight
nmap <leader><space> :noh<CR>

" <leader>cd : switch to the directory of the current buffer
nmap <leader>cd :cd %:p:h<CR>

" <leader>r : screen sucks, redraw everything
nnoremap <leader>r :redraw!<CR>

" <leader>src : source ~/.vimrc
nnoremap <leader>src :source ~/.vimrc<CR>

" <leader>y, <leader>p : yank to or paste from the system clipboard
noremap <leader>y "+y
noremap <leader>p "+p

" <leader>w : save
nnoremap <leader>w :w!<CR>

" }}}

"""""""""""""""""""""""""""""""""
" 3. Colors, Highlight and Syntax
"""""""""""""""""""""""""""""""""

" color settings
set t_Co=256				" use 256 color
set bg=dark

if &term =~ '256color'
	" Disable Background Color Erase (BCE) so that color schemes
	" work properly when Vim is used inside tmux and GNU screen.
	set t_ut=
endif

" apply base theme
" colorscheme blue

" override more customized colors
highlight LineNr		ctermfg=black guifg=black ctermbg=245 guibg=#8a8a8a
highlight StatusLine	ctermfg=LightGreen

highlight Normal		ctermfg=255 guifg=white
highlight Comment		ctermfg=035 guifg=#38B04A
highlight Constant		ctermfg=204 guifg=#ff5f87
highlight PreProc		ctermfg=219 guifg=#ffafff

" no underline, current cursor line
highlight CursorLine	cterm=none

" show cursorline for active window only
augroup NrHighlight
  autocmd!
  autocmd BufEnter * setlocal cursorline
  autocmd BufLeave * setlocal nocursorline
augroup END

au FileType c,cpp,latex,tex highlight Comment ctermfg=cyan

" IDE settings
filetype plugin on
filetype indent on

" Use spaces instead of tab in python codes
au FileType python set expandtab

" filetype detections
au BufRead,BufNewFile /etc/nginx/* if &ft == '' | setfiletype nginx | endif

" remove trailing whitespaces on save
fun! StripTrailingWhitespaces()
	let l = line(".")
	let c = col(".")
	%s/\s\+$//e
	call cursor(l, c)
endfun

autocmd FileType c,cpp,java,javascript,html,ruby,python autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()

" highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red guibg=red

match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()


" better popup menu colors (instead of dark black)
highlight Pmenu ctermfg=black ctermbg=yellow
highlight PmenuSel ctermfg=red ctermbg=white gui=bold

"""""""""""""""""""""""""""
" 4. GUI Options
"""""""""""""""""""""""""""

" gui settings
if has("gui_running")

	if has("unix")
		let s:uname = substitute(system("uname -s"), '\n', '', '')
	endif

	if has("gui_win32")
		language mes en			" use english messages (korean characters broken)
		set langmenu=none		" use english context menus (korean characters broken)
		set guioptions-=T		" exclude toolbar
		set guioptions-=m		" exclude menubar

		" font setting for windows
		set guifont=Consolas:h11:cANSI
		set guifontwide=GulimChe:h12:cDEFAULT

	elseif has("gui_gtk2")
		" font setting for Ubuntu linux (GTK)
		set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12

	elseif has("unix") && s:uname == "Darwin"
		" font setting for Mac OS X (Darwin)
		set guifont=Monaco\ for\ Powerline:h12
		set guifontwide=Apple\ SD\ Gothic\ Neo\ UltraLight:h12
	endif

endif


"""""""""""""""""""""""""""
" 5. Plugin Settings
"""""""""""""""""""""""""""

" vim-pandoc
let g:pandoc_no_folding = 1		" no automatic folding


" python-mode {{{

" disable code folding by default
let g:pymode_folding = 0

" disable rope (terribly slow), in favor of jedi-vim
let g:pymode_rope = 0

" prefer jedi's <leader>r (rename), instead of run
" however, jedi resets all the highlight :( - why?
let g:pymode_run = 0

" }}}


" fugitive key mappings
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gs :Gstatus<CR>:20wincmd +<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gb :Gblame<CR>:20wincmd <<CR>
nnoremap <leader>gci :Gcommit<CR>

" gundo key mappings and options
let g:gundo_right = 1   " show at right
nnoremap <leader>G :GundoToggle<CR>

" tagbar key mappings
nnoremap <leader>t :TagbarToggle<CR>



"""""""""""""""""""""""""""
" Extra Settings
"""""""""""""""""""""""""""

" Use local vimrc if available
if filereadable(expand("\~/.vimrc.local"))
	source \~/.vimrc.local
endif
